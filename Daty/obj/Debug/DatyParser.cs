//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ppmic\Desktop\Kalkulator dat\Daty\Daty.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Daty {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class DatyParser : Parser {
	public const int
		SLOWNIE=1, SEPARATOR=2, SEPARATOR1=3, SEPARATOR2=4, MINUS=5, PLUS=6, SGODZ=7, 
		MIESIAC=8, GODZINA=9, DZIEN=10, MINSEC=11, SPAN=12, ROK=13, LICZBA=14, 
		WS=15;
	public const int
		RULE_prog = 0, RULE_wyrazenie = 1, RULE_ddmmrrrr = 2, RULE_mmddrrrr = 3, 
		RULE_rrrrmmdd = 4, RULE_rrrrddmm = 5, RULE_timespan = 6;
	public static readonly string[] ruleNames = {
		"prog", "wyrazenie", "ddmmrrrr", "mmddrrrr", "rrrrmmdd", "rrrrddmm", "timespan"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SLOWNIE", "SEPARATOR", "SEPARATOR1", "SEPARATOR2", "MINUS", "PLUS", 
		"SGODZ", "MIESIAC", "GODZINA", "DZIEN", "MINSEC", "SPAN", "ROK", "LICZBA", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Daty.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DatyParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public WyrazenieContext wyrazenie() {
			return GetRuleContext<WyrazenieContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 14; wyrazenie();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WyrazenieContext : ParserRuleContext {
		public WyrazenieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wyrazenie; } }
	 
		public WyrazenieContext() { }
		public virtual void CopyFrom(WyrazenieContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DzialanieContext : WyrazenieContext {
		public IToken op;
		public WyrazenieContext wyrazenie() {
			return GetRuleContext<WyrazenieContext>(0);
		}
		public DdmmrrrrContext ddmmrrrr() {
			return GetRuleContext<DdmmrrrrContext>(0);
		}
		public MmddrrrrContext mmddrrrr() {
			return GetRuleContext<MmddrrrrContext>(0);
		}
		public RrrrmmddContext rrrrmmdd() {
			return GetRuleContext<RrrrmmddContext>(0);
		}
		public RrrrddmmContext rrrrddmm() {
			return GetRuleContext<RrrrddmmContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(DatyParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DatyParser.MINUS, 0); }
		public DzialanieContext(WyrazenieContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterDzialanie(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitDzialanie(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDzialanie(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KoniecContext : WyrazenieContext {
		public ITerminalNode Eof() { return GetToken(DatyParser.Eof, 0); }
		public KoniecContext(WyrazenieContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterKoniec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitKoniec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKoniec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WyrazenieContext wyrazenie() {
		WyrazenieContext _localctx = new WyrazenieContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_wyrazenie);
		int _la;
		try {
			State = 30;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SLOWNIE:
			case MIESIAC:
			case GODZINA:
			case DZIEN:
			case SPAN:
			case ROK:
				_localctx = new DzialanieContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 17; ddmmrrrr();
					}
					break;

				case 2:
					{
					State = 18; mmddrrrr();
					}
					break;

				case 3:
					{
					State = 19; rrrrmmdd();
					}
					break;

				case 4:
					{
					State = 20; rrrrddmm();
					}
					break;

				case 5:
					{
					State = 21; timespan();
					}
					break;
				}
				State = 25;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 24;
					((DzialanieContext)_localctx).op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
						((DzialanieContext)_localctx).op = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 27; wyrazenie();
				}
				break;
			case Eof:
				_localctx = new KoniecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdmmrrrrContext : ParserRuleContext {
		public ITerminalNode[] SEPARATOR() { return GetTokens(DatyParser.SEPARATOR); }
		public ITerminalNode SEPARATOR(int i) {
			return GetToken(DatyParser.SEPARATOR, i);
		}
		public ITerminalNode[] DZIEN() { return GetTokens(DatyParser.DZIEN); }
		public ITerminalNode DZIEN(int i) {
			return GetToken(DatyParser.DZIEN, i);
		}
		public ITerminalNode[] GODZINA() { return GetTokens(DatyParser.GODZINA); }
		public ITerminalNode GODZINA(int i) {
			return GetToken(DatyParser.GODZINA, i);
		}
		public ITerminalNode[] MIESIAC() { return GetTokens(DatyParser.MIESIAC); }
		public ITerminalNode MIESIAC(int i) {
			return GetToken(DatyParser.MIESIAC, i);
		}
		public ITerminalNode SLOWNIE() { return GetToken(DatyParser.SLOWNIE, 0); }
		public ITerminalNode ROK() { return GetToken(DatyParser.ROK, 0); }
		public ITerminalNode[] SGODZ() { return GetTokens(DatyParser.SGODZ); }
		public ITerminalNode SGODZ(int i) {
			return GetToken(DatyParser.SGODZ, i);
		}
		public ITerminalNode[] MINSEC() { return GetTokens(DatyParser.MINSEC); }
		public ITerminalNode MINSEC(int i) {
			return GetToken(DatyParser.MINSEC, i);
		}
		public DdmmrrrrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddmmrrrr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterDdmmrrrr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitDdmmrrrr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdmmrrrr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdmmrrrrContext ddmmrrrr() {
		DdmmrrrrContext _localctx = new DdmmrrrrContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_ddmmrrrr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 33; Match(SEPARATOR);
			State = 34;
			_la = _input.La(1);
			if ( !(_la==SLOWNIE || _la==MIESIAC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 35; Match(SEPARATOR);
			{
			State = 36; Match(ROK);
			}
			State = 42;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 37;
				_la = _input.La(1);
				if ( !(_la==MIESIAC || _la==GODZINA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 38; Match(SGODZ);
				State = 39;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 40; Match(SGODZ);
				State = 41;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MmddrrrrContext : ParserRuleContext {
		public ITerminalNode[] MINUS() { return GetTokens(DatyParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(DatyParser.MINUS, i);
		}
		public ITerminalNode[] MIESIAC() { return GetTokens(DatyParser.MIESIAC); }
		public ITerminalNode MIESIAC(int i) {
			return GetToken(DatyParser.MIESIAC, i);
		}
		public ITerminalNode SLOWNIE() { return GetToken(DatyParser.SLOWNIE, 0); }
		public ITerminalNode[] DZIEN() { return GetTokens(DatyParser.DZIEN); }
		public ITerminalNode DZIEN(int i) {
			return GetToken(DatyParser.DZIEN, i);
		}
		public ITerminalNode[] GODZINA() { return GetTokens(DatyParser.GODZINA); }
		public ITerminalNode GODZINA(int i) {
			return GetToken(DatyParser.GODZINA, i);
		}
		public ITerminalNode ROK() { return GetToken(DatyParser.ROK, 0); }
		public ITerminalNode[] SGODZ() { return GetTokens(DatyParser.SGODZ); }
		public ITerminalNode SGODZ(int i) {
			return GetToken(DatyParser.SGODZ, i);
		}
		public ITerminalNode[] MINSEC() { return GetTokens(DatyParser.MINSEC); }
		public ITerminalNode MINSEC(int i) {
			return GetToken(DatyParser.MINSEC, i);
		}
		public MmddrrrrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mmddrrrr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterMmddrrrr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitMmddrrrr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMmddrrrr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MmddrrrrContext mmddrrrr() {
		MmddrrrrContext _localctx = new MmddrrrrContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_mmddrrrr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = _input.La(1);
			if ( !(_la==SLOWNIE || _la==MIESIAC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 45; Match(MINUS);
			State = 46;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 47; Match(MINUS);
			{
			State = 48; Match(ROK);
			}
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 49;
				_la = _input.La(1);
				if ( !(_la==MIESIAC || _la==GODZINA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 50; Match(SGODZ);
				State = 51;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 52; Match(SGODZ);
				State = 53;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RrrrmmddContext : ParserRuleContext {
		public ITerminalNode[] SEPARATOR1() { return GetTokens(DatyParser.SEPARATOR1); }
		public ITerminalNode SEPARATOR1(int i) {
			return GetToken(DatyParser.SEPARATOR1, i);
		}
		public ITerminalNode[] MIESIAC() { return GetTokens(DatyParser.MIESIAC); }
		public ITerminalNode MIESIAC(int i) {
			return GetToken(DatyParser.MIESIAC, i);
		}
		public ITerminalNode SLOWNIE() { return GetToken(DatyParser.SLOWNIE, 0); }
		public ITerminalNode[] DZIEN() { return GetTokens(DatyParser.DZIEN); }
		public ITerminalNode DZIEN(int i) {
			return GetToken(DatyParser.DZIEN, i);
		}
		public ITerminalNode[] GODZINA() { return GetTokens(DatyParser.GODZINA); }
		public ITerminalNode GODZINA(int i) {
			return GetToken(DatyParser.GODZINA, i);
		}
		public ITerminalNode ROK() { return GetToken(DatyParser.ROK, 0); }
		public ITerminalNode[] SGODZ() { return GetTokens(DatyParser.SGODZ); }
		public ITerminalNode SGODZ(int i) {
			return GetToken(DatyParser.SGODZ, i);
		}
		public ITerminalNode[] MINSEC() { return GetTokens(DatyParser.MINSEC); }
		public ITerminalNode MINSEC(int i) {
			return GetToken(DatyParser.MINSEC, i);
		}
		public RrrrmmddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrrrmmdd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterRrrrmmdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitRrrrmmdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRrrrmmdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RrrrmmddContext rrrrmmdd() {
		RrrrmmddContext _localctx = new RrrrmmddContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_rrrrmmdd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 56; Match(ROK);
			}
			State = 57; Match(SEPARATOR1);
			State = 58;
			_la = _input.La(1);
			if ( !(_la==SLOWNIE || _la==MIESIAC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 59; Match(SEPARATOR1);
			State = 60;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 66;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 61;
				_la = _input.La(1);
				if ( !(_la==MIESIAC || _la==GODZINA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 62; Match(SGODZ);
				State = 63;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 64; Match(SGODZ);
				State = 65;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RrrrddmmContext : ParserRuleContext {
		public ITerminalNode[] SEPARATOR2() { return GetTokens(DatyParser.SEPARATOR2); }
		public ITerminalNode SEPARATOR2(int i) {
			return GetToken(DatyParser.SEPARATOR2, i);
		}
		public ITerminalNode[] DZIEN() { return GetTokens(DatyParser.DZIEN); }
		public ITerminalNode DZIEN(int i) {
			return GetToken(DatyParser.DZIEN, i);
		}
		public ITerminalNode[] GODZINA() { return GetTokens(DatyParser.GODZINA); }
		public ITerminalNode GODZINA(int i) {
			return GetToken(DatyParser.GODZINA, i);
		}
		public ITerminalNode[] MIESIAC() { return GetTokens(DatyParser.MIESIAC); }
		public ITerminalNode MIESIAC(int i) {
			return GetToken(DatyParser.MIESIAC, i);
		}
		public ITerminalNode SLOWNIE() { return GetToken(DatyParser.SLOWNIE, 0); }
		public ITerminalNode ROK() { return GetToken(DatyParser.ROK, 0); }
		public ITerminalNode[] SGODZ() { return GetTokens(DatyParser.SGODZ); }
		public ITerminalNode SGODZ(int i) {
			return GetToken(DatyParser.SGODZ, i);
		}
		public ITerminalNode[] MINSEC() { return GetTokens(DatyParser.MINSEC); }
		public ITerminalNode MINSEC(int i) {
			return GetToken(DatyParser.MINSEC, i);
		}
		public RrrrddmmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrrrddmm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterRrrrddmm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitRrrrddmm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRrrrddmm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RrrrddmmContext rrrrddmm() {
		RrrrddmmContext _localctx = new RrrrddmmContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_rrrrddmm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 68; Match(ROK);
			}
			State = 69; Match(SEPARATOR2);
			State = 70;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 71; Match(SEPARATOR2);
			State = 72;
			_la = _input.La(1);
			if ( !(_la==SLOWNIE || _la==MIESIAC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 78;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 73;
				_la = _input.La(1);
				if ( !(_la==MIESIAC || _la==GODZINA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 74; Match(SGODZ);
				State = 75;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 76; Match(SGODZ);
				State = 77;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimespanContext : ParserRuleContext {
		public ITerminalNode[] SPAN() { return GetTokens(DatyParser.SPAN); }
		public ITerminalNode SPAN(int i) {
			return GetToken(DatyParser.SPAN, i);
		}
		public ITerminalNode SEPARATOR() { return GetToken(DatyParser.SEPARATOR, 0); }
		public ITerminalNode[] SGODZ() { return GetTokens(DatyParser.SGODZ); }
		public ITerminalNode SGODZ(int i) {
			return GetToken(DatyParser.SGODZ, i);
		}
		public ITerminalNode[] GODZINA() { return GetTokens(DatyParser.GODZINA); }
		public ITerminalNode GODZINA(int i) {
			return GetToken(DatyParser.GODZINA, i);
		}
		public ITerminalNode[] MIESIAC() { return GetTokens(DatyParser.MIESIAC); }
		public ITerminalNode MIESIAC(int i) {
			return GetToken(DatyParser.MIESIAC, i);
		}
		public ITerminalNode[] DZIEN() { return GetTokens(DatyParser.DZIEN); }
		public ITerminalNode DZIEN(int i) {
			return GetToken(DatyParser.DZIEN, i);
		}
		public ITerminalNode[] MINSEC() { return GetTokens(DatyParser.MINSEC); }
		public ITerminalNode MINSEC(int i) {
			return GetToken(DatyParser.MINSEC, i);
		}
		public ITerminalNode ROK() { return GetToken(DatyParser.ROK, 0); }
		public ITerminalNode LICZBA() { return GetToken(DatyParser.LICZBA, 0); }
		public TimespanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timespan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.EnterTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDatyListener typedListener = listener as IDatyListener;
			if (typedListener != null) typedListener.ExitTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatyVisitor<TResult> typedVisitor = visitor as IDatyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimespanContext timespan() {
		TimespanContext _localctx = new TimespanContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_timespan);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(SPAN);
			State = 82;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC) | (1L << ROK) | (1L << LICZBA))) != 0)) {
				{
				State = 81;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC) | (1L << ROK) | (1L << LICZBA))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 84; Match(SEPARATOR);
			State = 85;
			_la = _input.La(1);
			if ( !(_la==MIESIAC || _la==GODZINA) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 86; Match(SGODZ);
			State = 87;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 88; Match(SGODZ);
			State = 89;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIESIAC) | (1L << GODZINA) | (1L << DZIEN) | (1L << MINSEC))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 90; Match(SPAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11_\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x5"+
		"\x2\x12\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x19\n\x3\x3\x3\x5\x3"+
		"\x1C\n\x3\x3\x3\x3\x3\x3\x3\x5\x3!\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4-\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x39\n\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x45\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aQ\n\a\x3\b\x3\b\x5\bU\n\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x2\x2\x2\t\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x2\b\x3\x2\a\b\x3\x2\n\f\x4\x2\x3\x3\n\n\x3\x2\n"+
		"\v\x3\x2\n\r\x4\x2\n\r\xF\x10\x63\x2\x11\x3\x2\x2\x2\x4 \x3\x2\x2\x2\x6"+
		"\"\x3\x2\x2\x2\b.\x3\x2\x2\x2\n:\x3\x2\x2\x2\f\x46\x3\x2\x2\x2\xER\x3"+
		"\x2\x2\x2\x10\x12\x5\x4\x3\x2\x11\x10\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2"+
		"\x12\x3\x3\x2\x2\x2\x13\x19\x5\x6\x4\x2\x14\x19\x5\b\x5\x2\x15\x19\x5"+
		"\n\x6\x2\x16\x19\x5\f\a\x2\x17\x19\x5\xE\b\x2\x18\x13\x3\x2\x2\x2\x18"+
		"\x14\x3\x2\x2\x2\x18\x15\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x18\x17\x3\x2"+
		"\x2\x2\x19\x1B\x3\x2\x2\x2\x1A\x1C\t\x2\x2\x2\x1B\x1A\x3\x2\x2\x2\x1B"+
		"\x1C\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1E\x5\x4\x3\x2\x1E!\x3\x2\x2"+
		"\x2\x1F!\a\x2\x2\x3 \x18\x3\x2\x2\x2 \x1F\x3\x2\x2\x2!\x5\x3\x2\x2\x2"+
		"\"#\t\x3\x2\x2#$\a\x4\x2\x2$%\t\x4\x2\x2%&\a\x4\x2\x2&,\a\xF\x2\x2\'("+
		"\t\x5\x2\x2()\a\t\x2\x2)*\t\x6\x2\x2*+\a\t\x2\x2+-\t\x6\x2\x2,\'\x3\x2"+
		"\x2\x2,-\x3\x2\x2\x2-\a\x3\x2\x2\x2./\t\x4\x2\x2/\x30\a\a\x2\x2\x30\x31"+
		"\t\x3\x2\x2\x31\x32\a\a\x2\x2\x32\x38\a\xF\x2\x2\x33\x34\t\x5\x2\x2\x34"+
		"\x35\a\t\x2\x2\x35\x36\t\x6\x2\x2\x36\x37\a\t\x2\x2\x37\x39\t\x6\x2\x2"+
		"\x38\x33\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\t\x3\x2\x2\x2:;\a\xF\x2\x2"+
		";<\a\x5\x2\x2<=\t\x4\x2\x2=>\a\x5\x2\x2>\x44\t\x3\x2\x2?@\t\x5\x2\x2@"+
		"\x41\a\t\x2\x2\x41\x42\t\x6\x2\x2\x42\x43\a\t\x2\x2\x43\x45\t\x6\x2\x2"+
		"\x44?\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\v\x3\x2\x2\x2\x46G\a\xF\x2\x2"+
		"GH\a\x6\x2\x2HI\t\x3\x2\x2IJ\a\x6\x2\x2JP\t\x4\x2\x2KL\t\x5\x2\x2LM\a"+
		"\t\x2\x2MN\t\x6\x2\x2NO\a\t\x2\x2OQ\t\x6\x2\x2PK\x3\x2\x2\x2PQ\x3\x2\x2"+
		"\x2Q\r\x3\x2\x2\x2RT\a\xE\x2\x2SU\t\a\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2"+
		"UV\x3\x2\x2\x2VW\a\x4\x2\x2WX\t\x5\x2\x2XY\a\t\x2\x2YZ\t\x6\x2\x2Z[\a"+
		"\t\x2\x2[\\\t\x6\x2\x2\\]\a\xE\x2\x2]\xF\x3\x2\x2\x2\v\x11\x18\x1B ,\x38"+
		"\x44PT";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Daty
